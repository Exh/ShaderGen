using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.InteropServices;
using Xunit;

namespace ShaderGen.Tests.AutoGenerated
{
    /// <summary>
    /// Holds information about the mappings of tested methods to the buffer.
    /// </summary>
    internal class Mappings
    {
        /// <summary>
        /// The buffer size required.
        /// </summary>
        public readonly int StructSize;

        /// <summary>
        /// The buffer size is a <see cref="StructSize">single struct size</see> * number of <see cref="Methods">methods</see>.
        /// As such it is the size of the buffer required to run each method exactly once.
        /// </summary>
        public readonly int BufferSize;

        /// <summary>
        /// The result set size is the amount of space required to store the results of every method exactly once. 
        /// </summary>
        public readonly int ResultSetSize;

        /// <summary>
        /// The buffer fields by name.
        /// </summary>
        public readonly IReadOnlyDictionary<string, PaddedStructCreator.Field> BufferFields;

        /// <summary>
        /// The method maps.
        /// </summary>
        public readonly IReadOnlyCollection<MethodMap> Methods;

        /// <summary>
        /// Initializes a new instance of the <see cref="Mappings" /> class.
        /// </summary>
        /// <param name="structSize">Size of the buffer.</param>
        /// <param name="bufferFields">The buffer fields.</param>
        /// <param name="methods">The methods.</param>
        public Mappings(int structSize, IReadOnlyDictionary<string, PaddedStructCreator.Field> bufferFields, IReadOnlyCollection<MethodMap> methods)
        {
            StructSize = structSize;
            BufferFields = bufferFields;
            BufferSize = structSize * methods.Count;
            Methods = methods;

            // Calcualtes size required for result set
            ResultSetSize = methods
                .Select(m => m.Return)
                .Where(r => r != null)
                .Sum(r => bufferFields[r].AlignmentInfo.ShaderSize);
        }

        /// <summary>
        /// Generates test data and results .
        /// </summary>
        /// <remarks></remarks>
        public (byte[] testData, byte[] results) GenerateTestData(int tests)
        {
            byte[] testData = new byte[BufferSize * tests];
            byte[] results = new byte[ResultSetSize * tests];

            int t = 0;
            int resultPos = 0;
            for (int test = 0; test < tests; test++)
            {
                Assert.Equal(0, resultPos % ResultSetSize);
                Assert.Equal(test, resultPos / ResultSetSize);
                Assert.Equal(0, t % Methods.Count);

                foreach (MethodMap method in Methods)
                {
                    method.GenerateTestData(this, testData, StructSize * t++, results, resultPos);

                    if (method.Return == null)
                    {
                        continue;
                    }

                    resultPos += BufferFields[method.Return].AlignmentInfo.ShaderSize;
                }
            }

            Assert.Equal(results.Length, resultPos);

            return (testData, results);
        }

        /// <summary>
        /// Gets the results from the pointer into a result set.
        /// </summary>
        /// <param name="data">The data.</param>
        /// <param name="resultSet">The result set.</param>
        /// <param name="offset">The offset.</param>
        public void GetResults(IntPtr data, byte[] resultSet, int offset)
        {
            foreach (MethodMap method in Methods)
            {
                if (method.Return == null)
                {
                    continue;
                }

                PaddedStructCreator.Field resultField = BufferFields[method.Return];
                int resultSize = resultField.AlignmentInfo.ShaderSize;
                Marshal.Copy(data + resultField.Position, resultSet, offset, resultSize);
                data += StructSize;
                offset += resultSize;
            }
        }
    }
}