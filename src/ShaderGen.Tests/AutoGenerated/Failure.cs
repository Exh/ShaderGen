using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Text;
using ShaderGen.Tests.Tools;

namespace ShaderGen.Tests.AutoGenerated
{
    internal class Failure
    {
        public readonly MethodMap MethodMap;
        private object[] Parameters;
        private IReadOnlyList<(object Result, IReadOnlyList<TestSet> TestSets)> Results;
        private readonly string _string;

        public Failure(MethodMap methodMap, object[] parameters,
            IReadOnlyList<(object Result, IReadOnlyList<TestSet> TestSets)> results)
        {
            MethodMap = methodMap;
            Parameters = parameters;
            Results = results;

            MethodInfo method = MethodMap.Method;
            StringBuilder builder = new StringBuilder()
                .Append(method.Name)
                .Append('(')
                .Append(string.Join(", ", parameters))
                .Append(')');

            (string Name, object Value)[] resultGroups = results.Select(r => (Name: string.Join(", ", r.TestSets.Select(t => t.Name)), Value: r.Result)).ToArray();
            int pad = resultGroups.Max(r => r.Name.Length) + 3;
            foreach ((string Name, object Value) group in resultGroups)
            {
                builder.AppendLine(string.Empty)
                    .AppendFormat(group.Name.PadLeft(pad))
                    .Append(" = ")
                    .Append(group.Value);
            }

            _string = builder.ToString();
        }

        public static Failure Test(
            TestSets testSets,
            MethodMap methodMap,
            PaddedStructCreator.Field resultField,
            int test)
        {
            // Get results
            IReadOnlyList<(object Result, IReadOnlyList<TestSet> TestSets)> results = testSets
                .Select(t => (TestSet: t, Result: methodMap.GetResult(t.Results, test)))
                .GroupBy(r => r.Result)
                .Select(g => (Result: g.Key, TestSets: (IReadOnlyList<TestSet>)g.Select(ts => ts.TestSet).ToArray()))
                .OrderByDescending(g => g.TestSets.Count)
                .ToArray();

            if (results.Count == 1)
            {
                // Results were all identical!
                return null;
            }

            return new Failure(methodMap, methodMap.GetParameters(testSets.TestData, test), results);
        }

        /// <summary>
        /// Returns a <see cref="System.String" /> that represents this instance.
        /// </summary>
        /// <returns>
        /// A <see cref="System.String" /> that represents this instance.
        /// </returns>
        public override string ToString() => _string;
    }
}